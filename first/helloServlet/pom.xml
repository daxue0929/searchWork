<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.daxue</groupId>
    <artifactId>helloServlet</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>SimpleOneServlet</module>
    </modules>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>


    <dependencies>
        <!--
            maven中dependency下scop的含义:
                控制dependency原色的使用范围.通俗的讲,就是控制jar包在哪些范围被加载使用.

                compile(默认):
                    如果没有指定scope值,默认值就是compile,被依赖项目需要参与到当前项目的贬义,测试,打包,运行阶段.打包时通常会包含被依赖的项目.
                provided:
                    被依赖项目理论上可以参与编译、测试、运行等阶段，相当于compile，但是再打包阶段做了exclude的动作。
                    适用场景：例如， 如果我们在开发一个web 应用，在编译时我们需要依赖 servlet-api.jar，但是在运行时我们不需要该 jar 包，
                    因为这个 jar 包已由应用服务器提供，此时我们需要使用 provided 进行范围修饰。
                runtime:
                    表示被依赖项目无需参与项目的编译，但是会参与到项目的测试和运行。与compile相比，被依赖项目无需参与项目的编译。
                    适用场景：例如，在编译的时候我们不需要 JDBC API 的 jar 包，而在运行的时候我们才需要 JDBC 驱动包。
                test
                    含义： 表示被依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。
                    适用场景：例如，Junit 测试。
                system:
                    system 元素与 provided 元素类似，但是被依赖项不会从 maven 仓库中查找，
                    而是从本地系统中获取，systemPath 元素用于制定本地系统中 jar 文件的路径
                import:
                    它只使用在<dependencyManagement>中，表示从其它的pom中导入dependency的配置，例如 (B项目导入A项目中的包配置)
                    例如spring boot项目不继承:
                    <parent>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-parent</artifactId>
                        <version>1.3.3.RELEASE</version>
                    </parent>
                    变为在dependencyManagement引入spring-boot-dependencies依赖.解决maven只能单继承的问题.
                    <dependencyManagement>
                        <dependencies>
                            <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-dependencies</artifactId>
                                <version>1.3.3.RELEASE</version>
                                <type>pom</type>
                                <scope>import</scope>
                            </dependency>
                        </dependencies>
                    </dependencyManagement>

                    <dependencies>
                        <dependency>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-web</artifactId>
                        </dependency>
                    </dependencies>
        -->

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>


        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>javax.servlet.jsp-api</artifactId>
            <version>2.3.3</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

</project>